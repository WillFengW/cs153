diff --git a/Makefile b/Makefile
index 09d790c..8b3b9d7 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_lab1_test\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/defs.h b/defs.h
index 82fb982..78e37fc 100644
--- a/defs.h
+++ b/defs.h
@@ -104,7 +104,8 @@ int             pipewrite(struct pipe*, char*, int);
 //PAGEBREAK: 16
 // proc.c
 int             cpuid(void);
-void            exit(void);
+void            exit(void); //a
+void            exitNew(int); //a
 int             fork(void);
 int             growproc(int);
 int             kill(int);
@@ -118,6 +119,8 @@ void            setproc(struct proc*);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
 int             wait(void);
+int             waitNew(int*); //b
+int             waitpid(int, int*, int); //c
 void            wakeup(void*);
 void            yield(void);
 
diff --git a/proc.c b/proc.c
index 806b1b1..4b48911 100644
--- a/proc.c
+++ b/proc.c
@@ -225,52 +225,140 @@ fork(void)
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
 void
-exit(void)
+exit(void) //a
 {
-  struct proc *curproc = myproc();
-  struct proc *p;
-  int fd;
+    struct proc *curproc = myproc();
+    struct proc *p;
+    int fd;
+
+    if(curproc == initproc)
+        panic("init exiting");
+
+    // Close all open files.
+    for(fd = 0; fd < NOFILE; fd++){
+        if(curproc->ofile[fd]){
+            fileclose(curproc->ofile[fd]);
+            curproc->ofile[fd] = 0;
+        }
+    }
+
+    begin_op();
+    iput(curproc->cwd);
+    end_op();
+    curproc->cwd = 0;
+
+    acquire(&ptable.lock);
 
-  if(curproc == initproc)
-    panic("init exiting");
+    // Parent might be sleeping in wait().
+    wakeup1(curproc->parent);
 
-  // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
-      fileclose(curproc->ofile[fd]);
-      curproc->ofile[fd] = 0;
+    // Pass abandoned children to init.
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+        if(p->parent == curproc){
+            p->parent = initproc;
+            if(p->state == ZOMBIE)
+                wakeup1(initproc);
+        }
     }
-  }
 
-  begin_op();
-  iput(curproc->cwd);
-  end_op();
-  curproc->cwd = 0;
+    // Jump into the scheduler, never to return.
+    curproc->state = ZOMBIE;
+    sched();
+    panic("zombie exit");
+}
 
-  acquire(&ptable.lock);
+void
+exitNew(int status) //a
+{
+    struct proc *curproc = myproc();
+    struct proc *p;
+    int fd;
+
+    if(curproc == initproc)
+        panic("init exiting");
+
+    // Close all open files.
+    for(fd = 0; fd < NOFILE; fd++){
+        if(curproc->ofile[fd]){
+            fileclose(curproc->ofile[fd]);
+            curproc->ofile[fd] = 0;
+        }
+    }
 
-  // Parent might be sleeping in wait().
-  wakeup1(curproc->parent);
+    begin_op();
+    iput(curproc->cwd);
+    end_op();
+    curproc->cwd = 0;
 
-  // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
-      p->parent = initproc;
-      if(p->state == ZOMBIE)
-        wakeup1(initproc);
+    acquire(&ptable.lock);
+
+    // Parent might be sleeping in wait().
+    wakeup1(curproc->parent);
+
+    // Pass abandoned children to init.
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+        if(p->parent == curproc){
+            p->parent = initproc;
+            if(p->state == ZOMBIE)
+                wakeup1(initproc);
+        }
     }
-  }
 
-  // Jump into the scheduler, never to return.
-  curproc->state = ZOMBIE;
-  sched();
-  panic("zombie exit");
+    // Jump into the scheduler, never to return.
+    curproc->state = ZOMBIE;
+    curproc->exitStatus = status;  // assign status into structure
+    sched();
+    panic("zombie exit");
 }
 
+
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
-wait(void)
+wait(void) //b
+{
+    struct proc *p;
+    int havekids, pid;
+    struct proc *curproc = myproc();
+
+    acquire(&ptable.lock);
+    for(;;){
+        // Scan through table looking for exited children.
+        havekids = 0;
+        for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+            if(p->parent != curproc)
+                continue;
+            havekids = 1;
+            if(p->state == ZOMBIE){
+                // Found one.
+                pid = p->pid;
+                kfree(p->kstack);
+                p->kstack = 0;
+                freevm(p->pgdir);
+                p->pid = 0;
+                p->parent = 0;
+                p->name[0] = 0;
+                p->killed = 0;
+                p->state = UNUSED;
+
+                release(&ptable.lock);
+                return pid;
+            }
+        }
+
+        // No point waiting if we don't have any children.
+        if(!havekids || curproc->killed){
+            release(&ptable.lock);
+            return -1;
+        }
+
+        // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+        sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+    }
+}
+
+int
+waitNew(int *status) //b
 {
   struct proc *p;
   int havekids, pid;
@@ -295,6 +383,8 @@ wait(void)
         p->name[0] = 0;
         p->killed = 0;
         p->state = UNUSED;
+        *status = p->exitStatus;  // read status from p and assign 0 to p
+        p->exitStatus = 0;
         release(&ptable.lock);
         return pid;
       }
@@ -311,6 +401,52 @@ wait(void)
   }
 }
 
+
+int
+waitpid(int pidArg, int *status, int options) //c option?
+{
+    struct proc *p;
+    int havekids;
+    struct proc *curproc = myproc();
+
+    acquire(&ptable.lock);
+    for(;;){
+        // Scan through table looking for exited children.
+        havekids = 0;
+        for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+            if(p->pid != pidArg) // if 2 pid matched, look for status
+                continue;
+            havekids = 1;
+            if(p->state == ZOMBIE){
+                // Found one.
+
+                kfree(p->kstack);
+                p->kstack = 0;
+                freevm(p->pgdir);
+                p->pid = 0;
+                p->parent = 0;
+                p->name[0] = 0;
+                p->killed = 0;
+                p->state = UNUSED;
+                *status = p->exitStatus;
+                p->exitStatus = 0;
+                release(&ptable.lock);
+                return pidArg;
+            }
+        }
+
+        // No point waiting if we don't have any children.
+        if(!havekids || curproc->killed){
+            release(&ptable.lock);
+            return -1;
+        }
+
+        // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+        sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+    }
+}
+
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
diff --git a/proc.h b/proc.h
index 1647114..57c01c1 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int exitStatus;              // status
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index ee85261..d33f1ae 100644
--- a/syscall.c
+++ b/syscall.c
@@ -86,7 +86,8 @@ extern int sys_chdir(void);
 extern int sys_close(void);
 extern int sys_dup(void);
 extern int sys_exec(void);
-extern int sys_exit(void);
+extern int sys_exit(void); //a
+extern int sys_exitNew(void); //a
 extern int sys_fork(void);
 extern int sys_fstat(void);
 extern int sys_getpid(void);
@@ -100,14 +101,19 @@ extern int sys_read(void);
 extern int sys_sbrk(void);
 extern int sys_sleep(void);
 extern int sys_unlink(void);
-extern int sys_wait(void);
+extern int sys_wait(void); //b
+extern int sys_waitNew(void); //b
+extern int sys_waitpid(void); //c
 extern int sys_write(void);
 extern int sys_uptime(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
 [SYS_exit]    sys_exit,
+[SYS_exitNew]    sys_exitNew,
 [SYS_wait]    sys_wait,
+[SYS_waitNew]    sys_waitNew,
+[SYS_waitpid]   sys_waitpid,
 [SYS_pipe]    sys_pipe,
 [SYS_read]    sys_read,
 [SYS_kill]    sys_kill,
diff --git a/syscall.h b/syscall.h
index bc5f356..f420e2d 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_waitpid  22
+#define SYS_waitNew  23
+#define SYS_exitNew  24
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 0686d29..6a43d3e 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -14,16 +14,36 @@ sys_fork(void)
 }
 
 int
-sys_exit(void)
+sys_exit(void) // original exit
 {
-  exit();
-  return 0;  // not reached
+    exit();
+    return 0;  // not reached
 }
 
 int
-sys_wait(void)
+sys_exitNew(void) // new exit with status, use argint to get the argument just like sys_kill
 {
-  return wait();
+    int status;
+
+    if(argint(0, &status) < 0)
+        return -1;
+    exitNew(status);
+    return 0;  // not reached
+}
+
+int
+sys_wait(void) // original wait
+{
+    return wait();
+}
+
+int
+sys_waitNew(void) // new wait with status, use argint to get the argument
+{
+    int *status;
+    if(argptr(0, (void*)&status, sizeof(status)) < 0)
+        return -1;
+    return waitNew(status);
 }
 
 int
@@ -89,3 +109,23 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_waitpid(void) {
+    int pidArg;
+    int options = 0;
+    int* status;
+
+    // if argint, 1st argument
+    if (argint(0, &pidArg) < 0) {
+        return -1;
+    }
+    // if argptr, 2nd argument
+    if (argptr(1, (void*)&status, sizeof(status)) < 0) {
+        return -1;
+    }
+    // return waitpid
+    //argint(0, &pidArg);
+    //argptr(0, (void*)&status, sizeof(status));
+    return waitpid(pidArg, status, options);
+}
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..8445f21 100644
--- a/user.h
+++ b/user.h
@@ -3,8 +3,11 @@ struct rtcdate;
 
 // system calls
 int fork(void);
-int exit(void) __attribute__((noreturn));
-int wait(void);
+void exit(void) __attribute__((noreturn)); //original exit
+void exitNew(int);                         //new exit with status
+int wait(void);                            //original wait
+int waitNew(int*);                         //new wait with status
+int waitpid(int, int*, int);               //new wait with pid
 int pipe(int*);
 int write(int, const void*, int);
 int read(int, void*, int);
diff --git a/usys.S b/usys.S
index 8bfd8a1..35651b1 100644
--- a/usys.S
+++ b/usys.S
@@ -10,7 +10,10 @@
 
 SYSCALL(fork)
 SYSCALL(exit)
+SYSCALL(exitNew)
 SYSCALL(wait)
+SYSCALL(waitNew)
+SYSCALL(waitpid)
 SYSCALL(pipe)
 SYSCALL(read)
 SYSCALL(write)
